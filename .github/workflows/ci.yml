on: [push, pull_request]

name: CI

jobs:
  check:
    name: Check
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          features: vulkan,visualizer
        - os: windows-latest
          features: vulkan,visualizer,d3d12,public-winapi
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --all-targets --features ${{ matrix.features }} --no-default-features

  test:
    name: Test Suite
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          features: vulkan,visualizer
        - os: windows-latest
          features: vulkan,visualizer,d3d12,public-winapi
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Test all targets
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-targets --features ${{ matrix.features }} --no-default-features
      - name: Test docs
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --doc --features ${{ matrix.features }} --no-default-features

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          features: vulkan,visualizer
        - os: windows-latest
          features: vulkan,visualizer,d3d12,public-winapi
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --all-targets --features ${{ matrix.features }} --no-default-features -- -D warnings

  doc:
    name: Build documentation
    # Windows supports the entire feature surface
    runs-on: windows-latest
    env:
      RUSTDOCFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --workspace --all-features --document-private-items

  readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Use cached cargo-readme
        uses: actions/cache@v3
        id: cargo-readme-cache
        with:
          path: ~/.cargo/bin/cargo-readme
          key: ${{ runner.os }}-cargo-readme
      - name: Install cargo-readme
        if: steps.cargo-readme-cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-readme
      - name: Check if README.md is up-to-date
        run: |
          cargo readme > README.md
          git diff --quiet || (echo '::error::Generated README is different, please regenerate with `cargo readme > README.md`'; git diff; false)
